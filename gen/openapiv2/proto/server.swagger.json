{
  "swagger": "2.0",
  "info": {
    "title": "proto/server.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Arena"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/choice": {
      "get": {
        "summary": "Retrieves a pair of jokes for comparison.",
        "operationId": "Arena_GetChoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetChoicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sessionId",
            "description": "TODO(rbtz): allow passing theme for jokes\nA UUID for the user's session.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Arena"
        ]
      }
    },
    "/v1/choice/{id}/rate": {
      "post": {
        "summary": "Submits the user's choice between two jokes.",
        "operationId": "Arena_RateChoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RateChoicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the joke pair being rated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArenaRateChoicesBody"
            }
          }
        ],
        "tags": [
          "Arena"
        ]
      }
    },
    "/v1/leaderboard": {
      "get": {
        "summary": "Gets the leaderboard of joke models.",
        "operationId": "Arena_GetLeaderboard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLeaderboardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Arena"
        ]
      }
    },
    "/v1/top-jokes": {
      "get": {
        "summary": "Gets the top jokes.",
        "operationId": "Arena_GetTopJokes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTopJokesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Arena"
        ]
      }
    }
  },
  "definitions": {
    "ArenaRateChoicesBody": {
      "type": "object",
      "properties": {
        "winner": {
          "$ref": "#/definitions/v1Winner",
          "description": "The user's selection."
        },
        "known": {
          "$ref": "#/definitions/v1Winner",
          "description": "Known jokes."
        }
      },
      "description": "RateChoicesRequest to rate the presented jokes."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1GetChoicesResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the joke pair."
        },
        "theme": {
          "type": "string",
          "description": "Theme for both jokes."
        },
        "leftJoke": {
          "type": "string",
          "description": "Text of the left joke."
        },
        "rightJoke": {
          "type": "string",
          "description": "Text of the right joke."
        }
      },
      "description": "GetChoicesResponse is a response to the GetChoicesRequest."
    },
    "v1GetLeaderboardResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LeaderboardEntry"
          }
        }
      },
      "description": "GetLeaderboardResponse contains the leaderboard of joke models."
    },
    "v1GetTopJokesResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TopJokesEntry"
          }
        }
      },
      "description": "GetTopJokesResponse contains the top jokes."
    },
    "v1LeaderboardEntry": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "description": "Public model name."
        },
        "votes": {
          "type": "string",
          "format": "uint64",
          "description": "Total votes for the model."
        },
        "newmanScore": {
          "type": "number",
          "format": "double",
          "description": "Newman Score of the model."
        },
        "newmanCILower": {
          "type": "number",
          "format": "double"
        },
        "newmanCIUpper": {
          "type": "number",
          "format": "double"
        },
        "eloScore": {
          "type": "number",
          "format": "double",
          "description": "Elo Score of the model."
        },
        "eloCILower": {
          "type": "number",
          "format": "double"
        },
        "eloCIUpper": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "LeaderboardEntry contains the model name and its Bradley-Terry rating."
    },
    "v1RateChoicesResponse": {
      "type": "object",
      "description": "RateChoicesResponse is a response to the RateChoicesRequest.\n\nTODO(rbtz): return jokes generation parameters: model, policy, etc."
    },
    "v1TopJokesEntry": {
      "type": "object",
      "properties": {
        "rank": {
          "type": "string",
          "format": "uint64",
          "description": "Rank of the joke."
        },
        "text": {
          "type": "string",
          "description": "Text of the joke.\n\nTODO(rbtz): add model name?"
        }
      },
      "description": "TopJokesEntry contains the rank and text of the joke."
    },
    "v1Winner": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "NONE",
        "LEFT",
        "RIGHT",
        "BOTH"
      ],
      "default": "UNSPECIFIED",
      "description": "Winner enum of possible user choices.\n\n - UNSPECIFIED: Default unspecified value.\n - NONE: User didn't like either joke.\n - LEFT: User chose the left joke.\n - RIGHT: User chose the right joke.\n - BOTH: User liked both jokes equally."
    }
  }
}
