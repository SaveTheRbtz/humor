// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/server.proto

package choicesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Arena_GetChoices_FullMethodName           = "/choices.v1.Arena/GetChoices"
	Arena_RateChoices_FullMethodName          = "/choices.v1.Arena/RateChoices"
	Arena_GetLeaderboard_FullMethodName       = "/choices.v1.Arena/GetLeaderboard"
	Arena_RegenerateLeadeboard_FullMethodName = "/choices.v1.Arena/RegenerateLeadeboard"
)

// ArenaClient is the client API for Arena service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Arena service provides joke comparison functionalities.
type ArenaClient interface {
	// Retrieves a pair of jokes for comparison.
	GetChoices(ctx context.Context, in *GetChoicesRequest, opts ...grpc.CallOption) (*GetChoicesResponse, error)
	// Submits the user's choice between two jokes.
	RateChoices(ctx context.Context, in *RateChoicesRequest, opts ...grpc.CallOption) (*RateChoicesResponse, error)
	// Gets the leaderboard of joke models.
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	// Regenerate leaderboard.
	RegenerateLeadeboard(ctx context.Context, in *RegenerateLeaderboardRequest, opts ...grpc.CallOption) (*RegenerateLeaderboardResponse, error)
}

type arenaClient struct {
	cc grpc.ClientConnInterface
}

func NewArenaClient(cc grpc.ClientConnInterface) ArenaClient {
	return &arenaClient{cc}
}

func (c *arenaClient) GetChoices(ctx context.Context, in *GetChoicesRequest, opts ...grpc.CallOption) (*GetChoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChoicesResponse)
	err := c.cc.Invoke(ctx, Arena_GetChoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaClient) RateChoices(ctx context.Context, in *RateChoicesRequest, opts ...grpc.CallOption) (*RateChoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateChoicesResponse)
	err := c.cc.Invoke(ctx, Arena_RateChoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, Arena_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaClient) RegenerateLeadeboard(ctx context.Context, in *RegenerateLeaderboardRequest, opts ...grpc.CallOption) (*RegenerateLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateLeaderboardResponse)
	err := c.cc.Invoke(ctx, Arena_RegenerateLeadeboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArenaServer is the server API for Arena service.
// All implementations must embed UnimplementedArenaServer
// for forward compatibility.
//
// Arena service provides joke comparison functionalities.
type ArenaServer interface {
	// Retrieves a pair of jokes for comparison.
	GetChoices(context.Context, *GetChoicesRequest) (*GetChoicesResponse, error)
	// Submits the user's choice between two jokes.
	RateChoices(context.Context, *RateChoicesRequest) (*RateChoicesResponse, error)
	// Gets the leaderboard of joke models.
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	// Regenerate leaderboard.
	RegenerateLeadeboard(context.Context, *RegenerateLeaderboardRequest) (*RegenerateLeaderboardResponse, error)
	mustEmbedUnimplementedArenaServer()
}

// UnimplementedArenaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArenaServer struct{}

func (UnimplementedArenaServer) GetChoices(context.Context, *GetChoicesRequest) (*GetChoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoices not implemented")
}
func (UnimplementedArenaServer) RateChoices(context.Context, *RateChoicesRequest) (*RateChoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateChoices not implemented")
}
func (UnimplementedArenaServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedArenaServer) RegenerateLeadeboard(context.Context, *RegenerateLeaderboardRequest) (*RegenerateLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateLeadeboard not implemented")
}
func (UnimplementedArenaServer) mustEmbedUnimplementedArenaServer() {}
func (UnimplementedArenaServer) testEmbeddedByValue()               {}

// UnsafeArenaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArenaServer will
// result in compilation errors.
type UnsafeArenaServer interface {
	mustEmbedUnimplementedArenaServer()
}

func RegisterArenaServer(s grpc.ServiceRegistrar, srv ArenaServer) {
	// If the following call pancis, it indicates UnimplementedArenaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Arena_ServiceDesc, srv)
}

func _Arena_GetChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServer).GetChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Arena_GetChoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServer).GetChoices(ctx, req.(*GetChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arena_RateChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServer).RateChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Arena_RateChoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServer).RateChoices(ctx, req.(*RateChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arena_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Arena_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arena_RegenerateLeadeboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArenaServer).RegenerateLeadeboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Arena_RegenerateLeadeboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArenaServer).RegenerateLeadeboard(ctx, req.(*RegenerateLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Arena_ServiceDesc is the grpc.ServiceDesc for Arena service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Arena_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "choices.v1.Arena",
	HandlerType: (*ArenaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChoices",
			Handler:    _Arena_GetChoices_Handler,
		},
		{
			MethodName: "RateChoices",
			Handler:    _Arena_RateChoices_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _Arena_GetLeaderboard_Handler,
		},
		{
			MethodName: "RegenerateLeadeboard",
			Handler:    _Arena_RegenerateLeadeboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
