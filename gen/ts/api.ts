/* tslint:disable */
/* eslint-disable */
/**
 * proto/server.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Request to rate the presented jokes.
 * @export
 * @interface ArenaRateChoicesBody
 */
export interface ArenaRateChoicesBody {
    /**
     * 
     * @type {V1Winner}
     * @memberof ArenaRateChoicesBody
     */
    'winner'?: V1Winner;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface V1GetChoicesResponse
 */
export interface V1GetChoicesResponse {
    /**
     * Unique identifier for the joke pair.
     * @type {string}
     * @memberof V1GetChoicesResponse
     */
    'id'?: string;
    /**
     * Theme for both jokes.
     * @type {string}
     * @memberof V1GetChoicesResponse
     */
    'theme'?: string;
    /**
     * Text of the left joke.
     * @type {string}
     * @memberof V1GetChoicesResponse
     */
    'leftJoke'?: string;
    /**
     * Text of the right joke.
     * @type {string}
     * @memberof V1GetChoicesResponse
     */
    'rightJoke'?: string;
}
/**
 * Enumeration of possible user choices.   - UNSPECIFIED: Default unspecified value.  - NONE: User didn\'t like either joke.  - LEFT: User chose the left joke.  - RIGHT: User chose the right joke.  - BOTH: User liked both jokes equally.
 * @export
 * @enum {string}
 */

export const V1Winner = {
    Unspecified: 'UNSPECIFIED',
    None: 'NONE',
    Left: 'LEFT',
    Right: 'RIGHT',
    Both: 'BOTH'
} as const;

export type V1Winner = typeof V1Winner[keyof typeof V1Winner];



/**
 * ArenaApi - axios parameter creator
 * @export
 */
export const ArenaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a pair of jokes for comparison.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arenaGetChoices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/choice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits the user\'s choice between two jokes.
         * @param {string} id Identifier of the joke pair being rated.
         * @param {ArenaRateChoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arenaRateChoices: async (id: string, body: ArenaRateChoicesBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('arenaRateChoices', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('arenaRateChoices', 'body', body)
            const localVarPath = `/v1/choice/{id}/rate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArenaApi - functional programming interface
 * @export
 */
export const ArenaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArenaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves a pair of jokes for comparison.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async arenaGetChoices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetChoicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.arenaGetChoices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArenaApi.arenaGetChoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Submits the user\'s choice between two jokes.
         * @param {string} id Identifier of the joke pair being rated.
         * @param {ArenaRateChoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async arenaRateChoices(id: string, body: ArenaRateChoicesBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.arenaRateChoices(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArenaApi.arenaRateChoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArenaApi - factory interface
 * @export
 */
export const ArenaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArenaApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves a pair of jokes for comparison.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arenaGetChoices(options?: RawAxiosRequestConfig): AxiosPromise<V1GetChoicesResponse> {
            return localVarFp.arenaGetChoices(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits the user\'s choice between two jokes.
         * @param {string} id Identifier of the joke pair being rated.
         * @param {ArenaRateChoicesBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        arenaRateChoices(id: string, body: ArenaRateChoicesBody, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.arenaRateChoices(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArenaApi - object-oriented interface
 * @export
 * @class ArenaApi
 * @extends {BaseAPI}
 */
export class ArenaApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a pair of jokes for comparison.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenaApi
     */
    public arenaGetChoices(options?: RawAxiosRequestConfig) {
        return ArenaApiFp(this.configuration).arenaGetChoices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits the user\'s choice between two jokes.
     * @param {string} id Identifier of the joke pair being rated.
     * @param {ArenaRateChoicesBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArenaApi
     */
    public arenaRateChoices(id: string, body: ArenaRateChoicesBody, options?: RawAxiosRequestConfig) {
        return ArenaApiFp(this.configuration).arenaRateChoices(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



